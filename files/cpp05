Vamos projetar um pesadelo artificial de escritórios, corredores, formulários e filas de espera.
Parece divertido? Não? Muito ruim.
Primeiro, comece pela menor engrenagem dessa vasta máquina burocrática: o Burocrata.
Um burocrata deve ter:

• Um nome constante.
• E uma nota que varia de 1 (maior nota possível) a 150 (menor nota possível nota).
Qualquer tentativa de instanciar um Burocrata usando uma nota inválida deve gerar uma exceção:

um Bureaucrat::GradeTooHighException ou um Bureaucrat::GradeTooLowException


Você fornecerá getters para ambos os atributos: getName() e getGrade(). 
Implemente também duas funções de membro para aumentar ou diminuir o grau do burocrata. 
Se a nota estiver fora do intervalo, ambos lançarão as mesmas exceções que o construtor.

Lembrar. Como o grau 1 é o mais alto e o 150 o mais baixo,
incrementar uma nota 3 deveria dar uma nota 2 ao burocrata.


As exceções lançadas devem ser capturadas usando blocos try e catch:


try
{
	/* do some stuff with bureaucrats */
}
catch (std::exception & e)
{
	/* handle exception */
}	

Você implementará uma sobrecarga do operador de inserção («) para imprimir algo como (sem os colchetes angulares):
<nome>, grau de burocrata <grau>.
Como de costume, faça alguns testes para provar que tudo funciona conforme o esperado.



ex02:

Como agora você tem formulários básicos, é hora de criar mais alguns que realmente façam alguma coisa.
Em todos os casos, a classe base Form deve ser uma classe abstrata e, portanto, deve ser renomeada como AForm. Lembre-se de que os atributos do formulário precisam permanecer privados e que estão na classe base.

Adicione as seguintes classes concretas:
	
• ShrubberyCreationForm: notas exigidas: assinar 145, exec 137
Crie um arquivo <target>_shrubbery no diretório de trabalho e escreva árvores ASCII dentro dele.

• RobotomiaRequestForm: Notas exigidas: assinar 72, exec 45
Faz alguns ruídos de perfuração. Em seguida, informa que <target> foi robotizado com sucesso 50% das vezes. Caso contrário, informa que a robotomia falhou.

• PresidentialPardonForm: notas exigidas: assinar 25, exec 5
Informa que <alvo> foi perdoado por Zaphod Beeblebrox.
Todos eles levam apenas um parâmetro em seu construtor: o destino do formulário. Por exemplo, "casa" se quiser plantar arbustos em casa.


Agora, adicione a função membro execute(Bureaucrat const & executor) const ao formulário base e implemente uma função para executar a ação do formulário das classes concretas. Você tem que verificar se o formulário está assinado e se o grau do burocrata tentar executar o formulário é alto o suficiente. Caso contrário, lance uma exceção apropriada.
Se você deseja verificar os requisitos em cada classe concreta ou na classe base (então chame outra função para executar o formulário) depende de você. No entanto, uma maneira é mais bonita que a outra.
Por fim, adicione a função de membro executeForm(Form const & form) ao arquivo Burocrata. Deve tentar executar o formulário. Se for bem-sucedido, imprima algo como:

<burocrata> executou <forma>

Caso contrário, imprima uma mensagem de erro explícita.
Implemente e entregue alguns testes para garantir que tudo funcione conforme o esperado.




ex03: 

Como o preenchimento de formulários é chato o suficiente, seria cruel pedir aos nossos burocratas que fizessem isso o dia todo. Felizmente, existem estagiários. Neste exercício, você deve implementar a classe Intern. O estagiário não tem nome, nem grau, nem características únicas. A única coisa com que os burocratas se preocupam é que eles façam o seu trabalho.
No entanto, o estagiário tem	 uma capacidade importante: a função makeForm(). Leva duas strings. O primeiro é o nome de um formulário e o segundo é o destino do formulário. Ele retorna um ponteiro para um objeto Form (cujo nome é o passado como parâmetro) cujo destino será inicializado com o segundo parâmetro.

Ele imprimirá algo como:

Intern creates <form>

Se o nome do formulário passado como parâmetro não existir, imprima uma mensagem de erro explícita.


Você deve evitar soluções ilegíveis e feias, como usar uma floresta if/elseif/else. Esse tipo de coisa não será aceito durante o processo de avaliação. Você não está mais em Piscine (piscina). Como de costume, você deve testar se tudo funciona conforme o esperado.
Por exemplo, o código abaixo cria um RobotomiaRequestForm direcionado para "Bender":

{
Intern someRandomIntern;
Form* rrf;
rrf = someRandomIntern.makeForm("robotomy request", "Bender");
}


ajeitar a logica de assisnatr 01



ajeitar incrementaccao e decrementacao | testar o operador de sobrecarga << | grades sao constantes ex 01 | ajustar o copy do estagiario
