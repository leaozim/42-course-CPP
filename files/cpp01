ex00 
diferenca entre alocar na stack para a heap.
	stack = acesso apenas no scopo da funcao, endereco de memoria sequencial, liberada automaticamente apos a funcaos ser encerrada
	heap = acesso fora do scopo da funcao, endereco de memoria podem nao ser sequencial, precisa ser liberada manualmente, é mais lenta
------------------------------------------------------------------------------
ex01:
alocacao de uma array
------------------------------------------------------------------------------
ex02:
referencia x ponteiros

referencia =	sempre aponta para a mesma variavel.
		Uma maneira de referenciarmos uma variável existente.
		precisa ser inicializada sempre ao ser declarada 
ponteiro   =	armazena um endereço de memória;
		Os tipos desse ponteiro não importam. Ele apenas indica o tipo de dados que presumivelmente contém. 
		Os próprios ponteiros também são variáveis ​​e armazenados na memória


Se algo deve sempre existir e nunca mudar, use uma referência. Mas se nem sempre existir e puder mudar, use um ponteiro.

------------------------------------------------------------------------------
ex03

pdf:  	Enquanto HumanA pega a Arma em seu construtor, HumanB não.
	HumanB pode nem sempre ter uma arma, enquanto HumanA sempre estará armado.
	Em qual caso você acha que seria melhor usar um ponteiro para Arma? E uma referência a Arma?

humanA = construtor ja vem com um arma definida
humanB = construtor comeca sem arma e cria-se um metodo para arma-lo. para exemplificar isso, o texte tem uma alteracao de
ser chamado com e sema arma.

------------------------------------------------------------------------------
ex04:
	classes base: 
	ifs fluxo de arquivo de entrada ofs fluxo de arquivo de saída

	isftream =  representa um fluxo de entrada de arquivo para que você só possa lê-lo
		 (Ela é usada para operações de leitura em arquivos.) - open, close, read
	ofstream = representa um fluxo de saída de arquivo que você só pode gravar nele 
		( é usada para operações de escrita em arquivos ) - write

elas encapsulam as funcionalidades de open, close, read e write em métodos convenientes. 
Isso torna o processo de leitura e escrita em arquivos mais simples e mais orientado a objetos.


------------------------------------------------------------------------------
ex05:
	- ponteiros para funções de membro
	Devemos escolher a função de membro apropriada com um ponteiro em vez de uma floresta de instruções if-else.
	Referem-se a ponteiros que apontam para funções membros de uma classe. 
	Um ponteiro para uma função membro permite armazenar o endereço de uma função específica associada a uma classe.
	permite acessar e chamar essa função específica através do objeto ou de um ponteiro para o objeto.

------------------------------------------------------------------------------
ex06:
utiliza SWITCH case
	executa diferentes blocos de código com base no valor da opção selecionada.

	default é executado quando nenhum dos casos correspondentes é encontrado (tipo o else)
	normalmente é usado o break no final de cada caso para sair do switch e evitar que os casos subsequentes sejam executados.
	A frase "Falls through" indica que a execução do código continuará para o próximo caso, mesmo que não haja uma instrução break para sair do bloco atual. 
	 evitar avisos de compilação relacionados a casos vazios ou fluxo de execução inesperado.

